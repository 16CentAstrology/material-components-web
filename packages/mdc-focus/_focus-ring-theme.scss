@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use '@material/theme/keys';
@use '@material/theme/theme';
@use '@material/theme/css';
@use '@material/theme/custom-properties';

$_prefix: 'focus-ring';
$_comp-prefix: 'focus-ring-comp';
$_comp-derived-prefix: 'focus-ring-comp-derived';

$_offset-horizontal-key: 'offset-horizontal';
$_offset-vertical-key: 'offset-vertical';
$_track-width-key: 'track-width';
$_ring-color-key: 'ring-color';
$_ring-border-start-start-radius-key: 'ring-border-start-start-radius';
$_ring-border-start-end-radius-key: 'ring-border-start-end-radius';
$_ring-border-end-end-radius-key: 'ring-border-end-end-radius';
$_ring-border-end-start-radius-key: 'ring-border-end-start-radius';

$default-theme: (
  $_offset-horizontal-key: 2px,
  $_offset-vertical-key: 2px,
  $_track-width-key: 3px,
  $_ring-color-key: 'secondary',
  $_ring-border-start-start-radius-key: inherit,
  $_ring-border-start-end-radius-key: inherit,
  $_ring-border-end-end-radius-key: inherit,
  $_ring-border-end-start-radius-key: inherit,
);

/// Generates CSS custom properties that are consumed by the focus ring styles.
/// These properties take precedence over those generated by
/// `theme-component` and `theme-component-derived`.
///
/// Intended to be used directly by Material Design customers, as the only
/// formally supported means of customizing the focus ring.
///
/// @param {Map} $theme - A map with one or more of the keys of $default-theme.
@mixin theme($theme) {
  @include theme.validate-theme($default-theme, $theme);
  @include keys.declare-custom-properties($theme, $_prefix);
}

/// Generates CSS custom properties that are consumed by the focus ring styles.
/// These properties are superseded by both those generated by `theme` and
/// `theme-component-derived`.
///
/// Intended to be used within the Material Design component library in order
/// to adapt the focus ring to the default theme of specific component it
/// applies to.
///
/// In the example below, we use the component focus ring theme to smoothly mold
/// the focus ring around the default border shape of the button.
///
/// .MaterialButton { // Material Design SASS.
///     @include button-theme.theme-styles($default-button-theme);
///     @include focus-ring-theme.theme-component(
///       focus-ring-theme.compute-focus-ring-border-radii-from-container-shape(
///         map.get($default-button-theme, 'container-shape'))
///     );
/// }
///
/// @param {Map} $theme - A map with one or more of the keys of $default-theme.
@mixin theme-component($theme) {
  @include theme.validate-theme($default-theme, $theme);
  @include keys.declare-custom-properties($theme, $_comp-prefix);
}

/// Generates CSS custom properties that are consumed by the focus ring styles.
/// These properties take precedence over those generated by `theme-component`
/// but are superseded by those generated by `theme`.
///
/// Intended to be used within the Material Design component library, wherever
/// we wish to automatically modify the focus ring visuals based on the user's
/// theme customization of a component that the focus ring applies to.
///
/// In the example below, we pick up the customized button shape and use the
/// component-derived focus ring theme to smoothly mold the focus ring around
/// the new button border shape.
///
/// .CustomMaterialButton { // Customer SASS.
///     @include button-theme.theme($button-theme-with-sharp-corners);
/// }
///
/// @mixin theme($theme) { // Material Design SASS.
///     // ...declare button theme custom properties, etc.
///
///     @include focus-ring-theme.theme-component-derived(
///       focus-ring-theme.compute-focus-ring-border-radii-from-container-shape(
///         map.get($theme, 'container-shape'))
///     );
/// }
///
/// @param {Map} $theme - A map with one or more of the keys of $default-theme.
@mixin theme-component-derived($theme) {
  @include theme.validate-theme($default-theme, $theme);
  @include keys.declare-custom-properties($theme, $_comp-derived-prefix);
}

@mixin theme-styles($theme: $default-theme) {
  @include theme.validate-theme-styles($default-theme, $theme);

  $ring-color: _var($theme, $_ring-color-key);
  $track-width: _var($theme, $_track-width-key);
  $offset-vertical: _var($theme, $_offset-vertical-key);
  $offset-horizontal: _var($theme, $_offset-horizontal-key);

  border: $track-width solid $ring-color;
  border-start-start-radius: _var($theme, $_ring-border-start-start-radius-key);
  border-start-end-radius: _var($theme, $_ring-border-start-end-radius-key);
  border-end-start-radius: _var($theme, $_ring-border-end-start-radius-key);
  border-end-end-radius: _var($theme, $_ring-border-end-end-radius-key);
  inset-block: calc(-1 * ($offset-vertical + $track-width));
  inset-inline: calc(-1 * ($offset-horizontal + $track-width));
}

/// In the case of many components, the focus ring is expected to simply mold
/// around their shape, parallel to their borders. In this case, setting the
/// focus ring's corner radii to 'inherit' is unfortunately not enough. The focus
/// ring has a track width as well as an offset to its component's border, and
/// its corners consequently look sharper than expected under
/// 'border-radius: inherit'. Keeping in mind that each rounded corner of an
/// element is the arc of a circle, we can nicely mold each corner of the focus
/// ring by ensuring that the center of the circle which generates it coincides
/// with the center of the circle of its corresponding container corner.
/// To achieve this, we can calculate the focus ring's corner radii by adding up
/// the focus ring's track width and offset to the container's border radii.
/// Diagram: https://screenshot.googleplex.com/BkMF8drenrSoSyv.png
///
/// @param {Number | List} $container-shape - A number or a list of
/// 1 to 4 values, describing the shape  of the element that the focus ring
/// applies to. If provided, the focus ring will try to mold itself around
/// this shape, similar to the way in which the a css:outline is drawn parallel
/// to the border of the element it applies to.
///
/// @param { Number } $focus-ring-offset-horizontal - The distance between
/// the left and right edges of the focus ring and the left and right
/// edges of the component it applies to.
///
/// @param { Number } $focus-ring-offset-vertical - The distance between
/// the upper and lower edges of the focus ring and the upper and lower
/// edges of the component it applies to.
///
/// @return { Map } - Values for the 4 corners of the focus ring:
/// { 'ring-border-start-start-radius'
///   'ring-border-start-end-radius'
///   'ring-border-end-end-radius'
///   'ring-border-end-start-radius' }
/// This map can be used as a focus ring theme.
@function compute-focus-ring-border-radii-from-container-shape(
  $container-shape,
  $focus-ring-track-width: map.get($default-theme, $_track-width-key),
  $focus-ring-offset-horizontal:
    map.get($default-theme, $_offset-horizontal-key),
  $focus-ring-offset-vertical: map.get($default-theme, $_offset-vertical-key)
) {
  @if $container-shape == null {
    @error '$container-shape is null. Expected a size value or a list of 1 to 4 size values.';
  }

  $container-border-radii: _unpack-border-radii($container-shape);
  $ring-average-offset: calc(
    ($focus-ring-offset-horizontal + $focus-ring-offset-vertical) / 2
  );

  @return (
    $_ring-border-start-start-radius-key:
      calc(
        list.nth($container-border-radii, 1) + $ring-average-offset +
          $focus-ring-track-width
      ),
    $_ring-border-start-end-radius-key:
      calc(
        list.nth($container-border-radii, 2) + $ring-average-offset +
          $focus-ring-track-width
      ),
    $_ring-border-end-end-radius-key:
      calc(
        list.nth($container-border-radii, 3) + $ring-average-offset +
          $focus-ring-track-width
      ),
    $_ring-border-end-start-radius-key:
      calc(
        list.nth($container-border-radii, 4) + $ring-average-offset +
          $focus-ring-track-width
      )
  );
}

/// This should be applied to the focus ring element when the focus ring
/// should be shown (e.g. based on `:focus-visible` pseudoclass).
@mixin show-focus-ring() {
  display: block;
}

@function _var($theme, $theme-key) {
  $ring-theme-property: #{$_prefix}-#{$theme-key}; // Top priority.
  $comp-derived-property: #{$_comp-derived-prefix}-#{$theme-key}; // 2nd.
  $comp-property: #{$_comp-prefix}-#{$theme-key}; // 3rd.
  $last-fallback: map.get($theme, $theme-key); // 4th.

  @return _create-var(
    $ring-theme-property,
    _create-var(
      $comp-derived-property,
      _create-var($comp-property, $last-fallback)
    )
  );
}

@function _create-var($var-name, $fallback) {
  @return custom-properties.create-var(
    custom-properties.create($var-name, $fallback)
  );
}

/// Examples:
/// 0 -> (0px 0px 0px 0px)
/// 1px -> (1px 1px 1px 1px)
/// (0px 0px) -> (0px 0px 0px 0px)
/// (1px 2rem 50%) -> (1px 2rem 50% 2rem)
/// (2px 2px 0 2px) -> (2px 2px 0px 2px)
@function _unpack-border-radii($shape) {
  $border-radii: css.unpack-value($shape);
  $sanitized-border-radii: ();

  @each $border-radius in $border-radii {
    $sanitized-border-radii: list.append(
      $sanitized-border-radii,
      if($border-radius == 0, 0px, $border-radius)
    );
  }

  @return $sanitized-border-radii;
}
